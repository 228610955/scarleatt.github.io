<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scarleatt</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-10T07:59:51.310Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Scarleatt</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机体系结构重要考点</title>
    <link href="http://yoursite.com/2020/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E9%87%8D%E8%A6%81%E8%80%83%E7%82%B9/"/>
    <id>http://yoursite.com/2020/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E9%87%8D%E8%A6%81%E8%80%83%E7%82%B9/</id>
    <published>2020-03-10T07:13:34.000Z</published>
    <updated>2020-03-10T07:59:51.310Z</updated>
    
    <content type="html"><![CDATA[<h4 id="同时多线程"><a href="#同时多线程" class="headerlink" title="同时多线程"></a>同时多线程</h4><p>线程：进程内的一个相对独立、可独立调度和指派的执行单元，它比进程要“轻巧”得多。线程中包含有调度所需的信息，但它自己基本上不拥有系统资源，只拥有在运行过程中必不可少的一点资源。线程切换时，只需保存和设置少量寄存器的内容，开销很小。</p><p>线程级并行：指并行执行两个或两个以上的线程。</p><p>同时多线程（SMT）：是一种在多流出、动态调度的处理器上结合了线程级并行和指令级并行的技术，它是多线程技术的一种改进。通过寄存器命名和动态调度机制，来自各个独立线程的多条指令可以同时流出，而不用考虑它们之间的相互依赖关系。</p><h5 id="实现多线程的主要方法"><a href="#实现多线程的主要方法" class="headerlink" title="实现多线程的主要方法"></a>实现多线程的主要方法</h5><p>细粒度多线程：在每条指令之间都可以进行线程的切换，从而使得多个线程可以交替执行。</p><ul><li>优点：能够隐藏由长时间停顿带来的吞吐率的损失，也能够隐藏由段时间停顿带来的损失。</li><li>缺点：减慢了单个线程的执行。即使没有任何停顿的线程也不能连续执行，而且会因为其他线程的指令的插入执行而被延迟。</li></ul><p>粗粒度多线程：线程之间的切换只发生在时间较长的停顿出现的时候。</p><ul><li>优点：减少了切换次数，很大程度上也不会降低单个线程的执行速度。</li><li>缺点：减少吞吐率损失的能力有限。由于实现粗粒度多线程的CPU只能执行单个线程的指令，不能交叉执行多个线程，因此当发生停顿时，流水线必须排空或暂停。</li></ul><h4 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h4><h5 id="写策略"><a href="#写策略" class="headerlink" title="写策略"></a>写策略</h5><p>写直达法：在执行写操作时，不仅把数据写入Cathe中相应的块，而且也写入下一级存储器。减少CPU写停顿的常用方法是，采用写缓冲器。</p><p>写回法：只把数据写入Cathe中相应的块，不写入下一级存储器。这些最新数据只有在相应的块被替换出时，才被写回下一级存储器。速度快，要设置“修改位”。</p><p>写不命中</p><p>按写分配法：写不命中时，把所写单元的块从主存中调入Cathe，然后再进行写入。与<u>写回法</u>配合。</p><p>不按写分配法：写不命中时，直接写入下一级存储器而不将相应的块调入Cathe。</p><h5 id="三种类型的Cathe不命中"><a href="#三种类型的Cathe不命中" class="headerlink" title="三种类型的Cathe不命中"></a>三种类型的Cathe不命中</h5><p>强制性不命中：当第一次访问一个快时，该块不在Cathe中，需从下一级存储器中调入Cathe。（冷启动访问不命中，首次访问不命中）</p><p>容量不命中：如果<u>程序执行时所需的块</u>不能全部调入Cathe中，当某些块被调出后，若又重新被访问，就会发生不命中。</p><p>冲突不命中：在组相联或者直接映像Cathe中，若太多的块映像到同一组（块）中，则会出现该组中某个块被别的块替换掉，然后又重新被访问的情况。（碰撞不命中，冲突不命中）</p><p>关系：</p><ul><li><strong>相联度</strong>越高，冲突不命中就越少；</li><li>强制性不命中和容量不命中不受相联度的影响；</li><li>强制性不命中不受<strong>Cathe容量</strong>的影响，但容量不命中却随着容量的增加而减少。</li></ul><h4 id="IO系统"><a href="#IO系统" class="headerlink" title="IO系统"></a>IO系统</h4><h5 id="I-O系统的可靠性、可用性和可信性"><a href="#I-O系统的可靠性、可用性和可信性" class="headerlink" title="I/O系统的可靠性、可用性和可信性"></a>I/O系统的可靠性、可用性和可信性</h5><p>可靠性：系统从某个初始参考点开始<u>一直连续提供服务的能力</u>，用平均无故障时间（<strong>MTTF</strong>）来衡量。MTTF的导数是失效率。系统总体的失效率是各部件的失效率之和。系统<u>中断服务的时间</u>用平均修复时间（<strong>MTTR</strong>）来衡量。</p><p>可用性：系统正常工作的时间在连续两次服务间隔时间中所占的比例。<br>$$<br>可用性=\frac{MTTF}{MTTF+MTTR}<br>$$<br>   平均失效间隔时间，MTBF<br>$$<br>MTBF=MTTF+MTTR<br>$$<br>可信性：是服务的质量，是<u>不可度量</u>的。</p><h5 id="廉价磁盘冗余阵列-RAID"><a href="#廉价磁盘冗余阵列-RAID" class="headerlink" title="廉价磁盘冗余阵列 (RAID)"></a>廉价磁盘冗余阵列 (RAID)</h5><p>RAID0：<u>无冗余和无校验</u>的磁盘阵列，成本最低。</p><p>RAID1：<u>镜像</u>磁盘阵列。</p><p>RAID2：采用纠错的<u>海明码</u>的磁盘阵列，冗余盘数量为$log_2m$，m为数据盘的个数。</p><p>RAID3：<u>位</u>交叉<u>奇偶校验</u>，只需要一个校验盘。</p><p>RAID4：<u>块</u>交叉<u>奇偶校验</u>，只需要一个校验盘。</p><p>RAID5：<u>无独立校验</u>的<u>奇偶校验</u>磁盘阵列，将校验信息分布到磁盘阵列中的各个磁盘。</p><p>以上奇偶校验磁盘阵列只是在<u>一个盘</u>出现故障的情况下，仍能继续工作和恢复数据。</p><p>RAID6：<u>P+Q双校验</u>磁盘阵列，可以容忍<u>两个磁盘</u>出错。</p><p>RAID10：RAID1+0，先进行镜像（RAID1），再进行条带存放（RAID0）。</p><p>RAID01：RAID0+1，先进行条带存放（RAID0），再进行镜像（RAID1）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;同时多线程&quot;&gt;&lt;a href=&quot;#同时多线程&quot; class=&quot;headerlink&quot; title=&quot;同时多线程&quot;&gt;&lt;/a&gt;同时多线程&lt;/h4&gt;&lt;p&gt;线程：进程内的一个相对独立、可独立调度和指派的执行单元，它比进程要“轻巧”得多。线程中包含有调度所需的信息，但它自己
      
    
    </summary>
    
    
    
      <category term="计算机体系结构" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
      <category term="同时多线程" scheme="http://yoursite.com/tags/%E5%90%8C%E6%97%B6%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="RAID" scheme="http://yoursite.com/tags/RAID/"/>
    
  </entry>
  
  <entry>
    <title>软件工程学概述</title>
    <link href="http://yoursite.com/2020/03/08/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AD%A6%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2020/03/08/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AD%A6%E6%A6%82%E8%BF%B0/</id>
    <published>2020-03-08T08:24:34.000Z</published>
    <updated>2020-03-10T08:00:49.125Z</updated>
    
    <content type="html"><![CDATA[<h4 id="软件危机"><a href="#软件危机" class="headerlink" title="软件危机"></a>软件危机</h4><ol><li><p>定义<br>在计算机软件的开发和维护过程会出现的一系列严重问题。包含两方面的问题：如何开发软件，以满足对软件日益增长的需求；如何维护数量不断膨胀的已有软件。</p></li><li><p>典型表现：</p><ul><li>软件成本日益增长；</li><li>软件开发效率低；</li><li>软件质量差；</li><li>软件维护困难；</li><li>软件开发速度跟不上计算机发展速度；</li><li>软件通常没有合适的文档资料。</li></ul></li><li><p>产生原因：</p><ul><li>技术原因<ul><li>软件<strong>规模</strong>越来越大；</li><li>软件的<strong>复杂度</strong>越来越高；</li></ul></li><li>管理原因<ul><li>软件开发缺乏正确的理论指导，过分依赖个人技巧和创造性；</li><li>对用户需求没有完整正确的认识，就匆忙着手忙于编写程序。</li></ul></li></ul></li><li><p>消除软件危机的途径</p><ul><li>对计算机软件有一个正确的认识；</li><li>还必须充分认识到软件开发是一种组织良好、管理严密、各类人员协同配合、共同完成的工程项目；</li><li>推广使用在时间中总结出来的开发软件的成功的技术和方法，并且探索更好更加有效的技术和方法；</li><li>开发和使用更好的软件工具。</li></ul></li></ol><h4 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h4><ol><li>定义：<ul><li>把系统的、规范的、可度量的途经应用于软件开发、运行和维护过程，也就是把工程应用于软件；</li><li>研究1提到的途径。</li></ul></li><li>基本原理：<ul><li>用分阶段的生命周期计划严格管理</li><li>坚持进行阶段评审</li><li>实行严格的产品控制</li><li>结果应能清楚地审查</li><li>采用现代化程序设计技术</li><li>开发小组人员应少而精</li><li>必须承认不断改进软件工程的必要性</li></ul></li><li>软件工程方法学的3个要素：方法、工具和过程。</li></ol><h4 id="软件生命周期"><a href="#软件生命周期" class="headerlink" title="软件生命周期"></a>软件生命周期</h4><p>由软件定义、软件开发和运行维护3个时期组成。</p><ol><li>软件定义<ul><li>问题定义</li><li>可行性分析</li><li>需求分析，确定目标系统具有哪些功能，并用正式文档记录对目标系统的需求（规格说明书）；</li></ul></li><li>软件开发<ul><li>总体设计</li><li>详细设计</li><li>单元和编码测试</li><li>综合测试，最基本的是集成测试和验收测试</li></ul></li><li>软件维护，包括四类维护性活动：改正性维护，完善性维护，适应性维护，预防性维护。</li></ol><h4 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a>软件过程</h4><p>为了获得高质量软件所需要完成的一系列任务的框架，它规定了完成各项任务的工作步骤。</p><ol><li><p>瀑布模型</p><ul><li>具有顺序性和依赖性</li><li>推迟实现</li><li>质量保证<br>是带反馈环的，每个阶段都有必须完成的文档，在每个阶段结束前都要对文档进行评审，是文档驱动的。</li></ul></li><li><p>快速原型模型<br>快速建立起来的可以在计算机上运行的程序，它所能完成的功能往往是最终产品能完成功能的一个子集。不带反馈环。</p></li><li><p>增量模型<br>把软件产品作为一系列的增量构件来设计、编码、集成和测试。每个构件由多个相互作用的模块构成，并且能够完成特定的功能。<br>优点：</p><ul><li>能在较短时间内向用户提交可完成部分工作的产品；</li><li>使用户有比较充裕的时间学习和适应新产品，减少一个全新软件可能给客户组织带来的冲击。</li></ul></li><li><p>螺旋模型<br>使用原型以及其他方法来尽量降低风险，看作是在每个阶段之前都增加了风险分析过程的快速原型模型。<br>优点：</p><ul><li>有利于已有软件的重用</li><li>有助于把软件质量作为软件开发的一个重要目标</li><li>减少了过多测试所带来的风险</li><li>维护只是模型的另一个周期，在维护和开发之前并没有本质区别</li><li>风险驱动，可以及时中断项目。<br>风险驱动也是它的一个弱点，需要专业的风险评估人员。</li></ul></li><li><p>喷泉模型<br>是典型的面向对象的软件过程模型之一，体现了面向对象软件开发过程<strong>迭代</strong>和<strong>无缝</strong>的特性。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;软件危机&quot;&gt;&lt;a href=&quot;#软件危机&quot; class=&quot;headerlink&quot; title=&quot;软件危机&quot;&gt;&lt;/a&gt;软件危机&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义&lt;br&gt;在计算机软件的开发和维护过程会出现的一系列严重问题。包含两方面的问题：如何开发软件，以满足对软
      
    
    </summary>
    
    
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="软件过程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/"/>
    
      <category term="软件危机" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%8D%B1%E6%9C%BA/"/>
    
      <category term="软件生命周期" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
      <category term="软件工程方法学" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%96%B9%E6%B3%95%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>CCF-JSON查询</title>
    <link href="http://yoursite.com/2017/12/02/CCF-JSON%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2017/12/02/CCF-JSON%E6%9F%A5%E8%AF%A2/</id>
    <published>2017-12-02T04:43:00.000Z</published>
    <updated>2020-03-10T08:00:24.478Z</updated>
    
    <content type="html"><![CDATA[<p>试题编号：   201709-3<br>试题名称：   JSON查询<br>时间限制：   1.0s<br>内存限制：   256.0MB<br>问题描述：<br>　　JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式，可以用来描述半结构化的数据。JSON 格式中的基本单元是值 (value)，出于简化的目的本题只涉及 2 种类型的值：<br>　　&#42; 字符串 (string)：字符串是由双引号 “ 括起来的一组字符（可以为空）。如果字符串的内容中出现双引号 “，在双引号前面加反斜杠，也就是用 \” 表示；如果出现反斜杠 \，则用两个反斜杠 \ 表示。反斜杠后面不能出现 “ 和 \ 以外的字符。例如：””、”hello”、”\”\“。<br>　　&#42; 对象 (object)：对象是一组键值对的无序集合（可以为空）。键值对表示对象的属性，键是属性名，值是属性的内容。对象以左花括号 { 开始，右花括号 } 结束，键值对之间以逗号 , 分隔。一个键值对的键和值之间以冒号 : 分隔。键必须是字符串，同一个对象所有键值对的键必须两两都不相同；值可以是字符串，也可以是另一个对象。例如：{}、{“foo”: “bar”}、{“Mon”: “weekday”, “Tue”: “weekday”, “Sun”: “weekend”}。<br>　　除了字符串内部的位置，其他位置都可以插入一个或多个空格使得 JSON 的呈现更加美观，也可以在一些地方换行，不会影响所表示的数据内容。例如，上面举例的最后一个 JSON 数据也可以写成如下形式。<br>　　{<br>　　“Mon”: “weekday”,<br>　　“Tue”: “weekday”,<br>　　“Sun”: “weekend”<br>　　}<br>　　给出一个 JSON 格式描述的数据，以及若干查询，编程返回这些查询的结果。<br>输入格式<br>　　第一行是两个正整数 n 和 m，分别表示 JSON 数据的行数和查询的个数。<br>　　接下来 n 行，描述一个 JSON 数据，保证输入是一个合法的 JSON 对象。<br>　　接下来 m 行，每行描述一个查询。给出要查询的属性名，要求返回对应属性的内容。需要支持多层查询，各层的属性名之间用小数点 . 连接。保证查询的格式都是合法的。<br>输出格式<br>　　对于输入的每一个查询，按顺序输出查询结果，每个结果占一行。<br>　　如果查询结果是一个字符串，则输出 STRING <string>，其中 <string> 是字符串的值，中间用一个空格分隔。<br>　　如果查询结果是一个对象，则输出 OBJECT，不需要输出对象的内容。<br>　　如果查询结果不存在，则输出 NOTEXIST。</string></string></p><p>样例输入<br>10 5<br>{<br>“firstName”: “John”,<br>“lastName”: “Smith”,<br>“address”: {<br>“streetAddress”: “2ndStreet”,<br>“city”: “NewYork”,<br>“state”: “NY”<br>},<br>“esc\aped”: “\”hello\””<br>}<br>firstName<br>address<br>address.city<br>address.postal<br>esc\aped<br>样例输出<br>STRING John<br>OBJECT<br>STRING NewYork<br>NOTEXIST<br>STRING “hello”<br>评测用例规模与约定<br>　　n ≤ 100，每行不超过 80 个字符。<br>　　m ≤ 100，每个查询的长度不超过 80 个字符。<br>　　字符串中的字符均为 ASCII 码 33-126 的可打印字符，不会出现空格。所有字符串都不是空串。<br>　　所有作为键的字符串不会包含小数点 .。查询时键的大小写敏感。<br>　　50%的评测用例输入的对象只有 1 层结构，80%的评测用例输入的对象结构层数不超过 2 层。举例来说，{“a”: “b”} 是一层结构的对象，{“a”: {“b”: “c”}} 是二层结构的对象，以此类推。<br>  <strong>思路</strong>：加一些标识位，用vector数据类型来存储键值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> json = <span class="string">""</span>;</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class="line">    getchar();</div><div class="line">    <span class="keyword">while</span> (n--) &#123;</div><div class="line">        <span class="built_in">string</span> temp;</div><div class="line">        getline(<span class="built_in">cin</span>, temp);</div><div class="line">        json += temp;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; all;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; pre;</div><div class="line">    <span class="built_in">string</span> preHost;</div><div class="line">    <span class="keyword">int</span> iskey = <span class="literal">true</span>, isvalue = <span class="literal">false</span>, isstring = <span class="literal">false</span>, blank = <span class="literal">false</span>;</div><div class="line">    <span class="built_in">string</span> key, value;</div><div class="line">    <span class="built_in">string</span> now_key;</div><div class="line">    <span class="built_in">string</span> temp_key;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; json.length(); i++) &#123;</div><div class="line">        <span class="keyword">if</span> (json[i] == <span class="string">' '</span>) blank = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">else</span> blank = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span> (json[i]==<span class="string">':'</span>) &#123;</div><div class="line">            isvalue = <span class="literal">true</span>;</div><div class="line">            iskey = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (isvalue &amp;&amp; json[i]==<span class="string">'&#123;'</span>) &#123;</div><div class="line">            isstring = <span class="literal">false</span>;</div><div class="line">            pre.push_back(key);</div><div class="line">            temp_key = <span class="string">""</span>;</div><div class="line">            <span class="keyword">if</span> (pre.size()&gt;<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pre.size()<span class="number">-1</span>; j++) &#123;</div><div class="line">                    temp_key += pre[j];</div><div class="line">                    temp_key += <span class="string">"."</span>;</div><div class="line">                &#125;</div><div class="line">                temp_key += pre[pre.size()<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">            all[temp_key] = <span class="string">"&#123;"</span>;</div><div class="line">            preHost += key;</div><div class="line">            preHost += <span class="string">"."</span>;</div><div class="line">            key = <span class="string">""</span>;</div><div class="line">            iskey = <span class="literal">true</span>;</div><div class="line">            isvalue = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (json[i]==<span class="string">'&#125;'</span>) &#123;</div><div class="line">            isvalue = <span class="literal">false</span>;</div><div class="line">            iskey = <span class="literal">true</span>;</div><div class="line">            i++;</div><div class="line">            temp_key = <span class="string">""</span>;</div><div class="line">            <span class="keyword">if</span> (pre.size()&gt;<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pre.size(); j++) &#123;</div><div class="line">                    temp_key += pre[j];</div><div class="line">                    temp_key += <span class="string">"."</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            temp_key+=key;</div><div class="line">            all[temp_key] = value;</div><div class="line"></div><div class="line">            preHost = <span class="string">""</span>;</div><div class="line">            key = <span class="string">""</span>; value = <span class="string">""</span>;</div><div class="line">            <span class="keyword">if</span> (pre.size()&gt;<span class="number">0</span>)</div><div class="line">                pre.pop_back();</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (isvalue &amp;&amp; json[i]==<span class="string">','</span>) &#123;</div><div class="line">            isvalue = <span class="literal">false</span>;</div><div class="line">            iskey = <span class="literal">true</span>;</div><div class="line"></div><div class="line">            temp_key = <span class="string">""</span>;</div><div class="line">            <span class="keyword">if</span> (pre.size()&gt;<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pre.size(); j++) &#123;</div><div class="line">                    temp_key += pre[j];</div><div class="line">                    temp_key += <span class="string">"."</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            temp_key+=key;</div><div class="line">            all[temp_key] = value;</div><div class="line"></div><div class="line">            key = <span class="string">""</span>; value = <span class="string">""</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (isvalue &amp;&amp; json[i]==<span class="string">'"'</span>) &#123;</div><div class="line">            isstring = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (iskey &amp;&amp; json[i]==<span class="string">'"'</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> ((json[i]==<span class="string">'\\'</span>&amp;&amp;json[i+<span class="number">1</span>]==<span class="string">'"'</span>) || (json[i]==<span class="string">'\\'</span>&amp;&amp;json[i+<span class="number">1</span>]==<span class="string">'\\'</span>)) i++;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (iskey &amp;&amp; !blank) key+=json[i];</div><div class="line">        <span class="keyword">if</span> (isvalue &amp;&amp; isstring &amp;&amp; !blank) value+=json[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">        <span class="built_in">string</span> temp;</div><div class="line">        getline(<span class="built_in">cin</span>, temp);</div><div class="line">        <span class="keyword">if</span> (all[temp]==<span class="string">""</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"NOTEXIST"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (all[temp]==<span class="string">"&#123;"</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"OBJECT"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"STRING "</span>&lt;&lt;all[temp]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;试题编号：   201709-3&lt;br&gt;试题名称：   JSON查询&lt;br&gt;时间限制：   1.0s&lt;br&gt;内存限制：   256.0MB&lt;br&gt;问题描述：&lt;br&gt;　　JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式，可以用来描
      
    
    </summary>
    
    
      <category term="CCF Answer" scheme="http://yoursite.com/categories/CCF-Answer/"/>
    
    
      <category term="CCF" scheme="http://yoursite.com/tags/CCF/"/>
    
  </entry>
  
  <entry>
    <title>最大子数组</title>
    <link href="http://yoursite.com/2017/11/15/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2017/11/15/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/</id>
    <published>2017-11-15T08:57:43.000Z</published>
    <updated>2020-03-10T08:00:40.229Z</updated>
    
    <content type="html"><![CDATA[<p>（1）递归法求解<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_max_crossing_subarray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left_sum = INT_MIN;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mid; i &gt;= low; i--) &#123;</div><div class="line">        sum += a[i];</div><div class="line">        <span class="keyword">if</span> (sum &gt; left_sum)</div><div class="line">            left_sum = sum;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> right_sum = INT_MIN;</div><div class="line">    sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = mid+<span class="number">1</span>; j &lt;= high; j++) &#123;</div><div class="line">        sum += a[j];</div><div class="line">        <span class="keyword">if</span> (sum &gt; right_sum)</div><div class="line">            right_sum = sum;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> left_sum+right_sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_maximum_subarray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (high == low)</div><div class="line">        <span class="keyword">return</span> a[low];</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> left_sum, right_sum, cross_sum, mid = (low+high)/<span class="number">2</span>;</div><div class="line">        left_sum = find_maximum_subarray(a, low, mid);</div><div class="line">        right_sum = find_maximum_subarray(a, mid+<span class="number">1</span>, high);</div><div class="line">        cross_sum = find_max_crossing_subarray(a, low, mid, high);</div><div class="line">        <span class="keyword">if</span> (left_sum &gt;= right_sum &amp;&amp; left_sum &gt;= cross_sum)</div><div class="line">            <span class="keyword">return</span> left_sum;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (right_sum &gt;= left_sum &amp;&amp; right_sum &gt;= cross_sum)</div><div class="line">            <span class="keyword">return</span> right_sum;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> cross_sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>（2）暴力求解法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_max_array</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> max = INT_MIN, sum;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++) &#123;</div><div class="line">        sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; v.size(); j++) &#123;</div><div class="line">            sum += v[j];</div><div class="line">            <span class="keyword">if</span> (sum &gt; max)</div><div class="line">                max = sum;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>（3）用python画了一个图比较两者的运行时间.  <a href="https://github.com/scarleatt/CLRS/blob/master/ch04/find_max_array.py" target="_blank" rel="external">python源代码</a></p><p><img src="/img/45AAFDE3-C2C3-4924-9AC5-30E8CDE04F7B.png"></p><p>（4）非递归、线性时间<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">linear_find_maximum_array</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, max = INT_MIN;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); i++) &#123;</div><div class="line">        sum+=a[i];</div><div class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</div><div class="line">            sum = <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; max)</div><div class="line">            max = sum;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>非递归、线性时间的主要思想是：当<code>sum&lt;0</code>时此前所有的累加和都清为0，重新开始新一轮累加</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;（1）递归法求解&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>逆序对</title>
    <link href="http://yoursite.com/2017/11/07/%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
    <id>http://yoursite.com/2017/11/07/%E9%80%86%E5%BA%8F%E5%AF%B9/</id>
    <published>2017-11-07T01:36:32.000Z</published>
    <updated>2020-03-10T08:00:53.348Z</updated>
    
    <content type="html"><![CDATA[<p>给出一个算法，它能用Θ(nlgn)的最坏情况运行时间，确定n个元素的任何排列中逆序对的数目。（提示：修改合并排序）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> q, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; count)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n1 = q-p+<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> n2 = r-q;</div><div class="line">    <span class="keyword">int</span> L[n1+<span class="number">1</span>], R[n2+<span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1; i++)</div><div class="line">        L[i] = a[p+i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n2; i++)</div><div class="line">        R[i] = a[q+i+<span class="number">1</span>];</div><div class="line">    L[n1] = INT_MAX;</div><div class="line">    R[n2] = INT_MAX;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = p; k &lt;= r; k++) &#123;</div><div class="line">        <span class="keyword">if</span> (L[i] &lt;= R[j]) &#123;</div><div class="line">            a[k] = L[i];</div><div class="line">            i++;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            a[k] = R[j];</div><div class="line">            j++;</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r, <span class="keyword">int</span> &amp;count)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (p &lt; r) &#123;</div><div class="line">        <span class="keyword">int</span> q = (p+r)/<span class="number">2</span>;</div><div class="line">        merge_sort(a, p, q, count);</div><div class="line">        merge_sort(a, q+<span class="number">1</span>, r, count);</div><div class="line">        merge(a, p, q, r, count);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a[<span class="number">8</span>] = &#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>&#125;;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">8</span>, count = <span class="number">0</span>;</div><div class="line">    merge_sort(a, <span class="number">0</span>, <span class="number">7</span>, count);</div><div class="line"></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给出一个算法，它能用Θ(nlgn)的最坏情况运行时间，确定n个元素的任何排列中逆序对的数目。（提示：修改合并排序）&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>归并排序中对小数组使用插入排序</title>
    <link href="http://yoursite.com/2017/11/06/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E4%B8%AD%E5%AF%B9%E5%B0%8F%E6%95%B0%E7%BB%84%E4%BD%BF%E7%94%A8%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/11/06/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E4%B8%AD%E5%AF%B9%E5%B0%8F%E6%95%B0%E7%BB%84%E4%BD%BF%E7%94%A8%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</id>
    <published>2017-11-06T08:30:00.000Z</published>
    <updated>2020-03-10T08:00:31.839Z</updated>
    
    <content type="html"><![CDATA[<p>归并排序中对小数组使用插入排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> threshold = <span class="number">20</span>; <span class="comment">//当需要排序的数的数目小于这个值时，就用插入排序</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">8</span>;  <span class="comment">//数组长度</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; len; j++) &#123;</div><div class="line">        <span class="keyword">int</span> i = j<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> key = a[j];</div><div class="line">        <span class="keyword">while</span> (i&gt;=<span class="number">0</span> &amp;&amp; a[i]&gt;key) &#123;</div><div class="line">            a[i+<span class="number">1</span>] = a[i];</div><div class="line">            i--;</div><div class="line">        &#125;</div><div class="line">        a[i+<span class="number">1</span>] = key;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> q, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n1 = q-p+<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> n2 = r-q;</div><div class="line">    <span class="keyword">int</span> L[n1+<span class="number">1</span>], R[n2+<span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1; i++)</div><div class="line">        L[i] = a[p+i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n2; i++)</div><div class="line">        R[i] = a[q+i+<span class="number">1</span>];</div><div class="line">    L[n1] = INT_MAX;</div><div class="line">    R[n2] = INT_MAX;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = p; k &lt;= r; k++) &#123;</div><div class="line">        <span class="keyword">if</span> (L[i] &lt;= R[j]) &#123;</div><div class="line">            a[k] = L[i];</div><div class="line">            i++;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            a[k] = R[j];</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (p-r &lt; threshold) &#123;</div><div class="line">        insert_sort(a, MAXN);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p &lt; r) &#123;</div><div class="line">        <span class="keyword">int</span> q = (p+r)/<span class="number">2</span>;</div><div class="line">        merge_sort(a, p, q);</div><div class="line">        merge_sort(a, q+<span class="number">1</span>, r);</div><div class="line">        merge(a, p, q, r);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a[<span class="number">8</span>] = &#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>&#125;;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">8</span>;</div><div class="line">    merge_sort(a, <span class="number">0</span>, <span class="number">7</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;归并排序中对小数组使用插入排序&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;d
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Chapter 2 Foundation of Algorithms</title>
    <link href="http://yoursite.com/2017/11/05/Chapter-2-Foundation-of-Algorithms/"/>
    <id>http://yoursite.com/2017/11/05/Chapter-2-Foundation-of-Algorithms/</id>
    <published>2017-11-05T13:05:00.000Z</published>
    <updated>2017-11-06T08:55:45.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="CLRS_Answer" scheme="http://yoursite.com/tags/CLRS-Answer/"/>
    
  </entry>
  
  <entry>
    <title>插入排序递归与非递归版</title>
    <link href="http://yoursite.com/2017/11/05/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E9%80%92%E5%BD%92%E4%B8%8E%E9%9D%9E%E9%80%92%E5%BD%92%E7%89%88/"/>
    <id>http://yoursite.com/2017/11/05/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E9%80%92%E5%BD%92%E4%B8%8E%E9%9D%9E%E9%80%92%E5%BD%92%E7%89%88/</id>
    <published>2017-11-05T11:53:09.000Z</published>
    <updated>2020-03-10T08:00:36.509Z</updated>
    
    <content type="html"><![CDATA[<p>递归版插入排序：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = j<span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> key = a[j];</div><div class="line">    <span class="keyword">while</span> (i&gt;=<span class="number">0</span> &amp;&amp; a[i]&gt;key) &#123;</div><div class="line">        a[i+<span class="number">1</span>] = a[i];</div><div class="line">        i--;</div><div class="line">    &#125;</div><div class="line">    a[i+<span class="number">1</span>] = key;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</div><div class="line">        insert_sort(a, j<span class="number">-1</span>);</div><div class="line">        insert(a, j);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">8</span>;</div><div class="line">    <span class="keyword">int</span> a[<span class="number">8</span>] = &#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>&#125;;</div><div class="line">    insert_sort(a, <span class="number">8</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>非递归版插入排序：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> arr[<span class="number">6</span>] = &#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">3</span>&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">6</span>; j++) &#123;</div><div class="line">        <span class="keyword">int</span> key = arr[j];</div><div class="line">        <span class="keyword">int</span> i = j<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; arr[i] &gt; key) &#123;</div><div class="line">            arr[i+<span class="number">1</span>] = arr[i];</div><div class="line">            i--;</div><div class="line">        &#125;</div><div class="line">        arr[i+<span class="number">1</span>] = key;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;递归版插入排序：&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class
      
    
    </summary>
    
    
    
      <category term="算法 插入排序" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning</title>
    <link href="http://yoursite.com/2017/11/01/Machine-Learning/"/>
    <id>http://yoursite.com/2017/11/01/Machine-Learning/</id>
    <published>2017-11-01T13:29:33.000Z</published>
    <updated>2017-11-01T13:30:41.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Neural-Network"><a href="#Neural-Network" class="headerlink" title="Neural Network"></a>Neural Network</h4><ul><li><p><a href="http://www.wildml.com/2015/09/implementing-a-neural-network-from-scratch/" target="_blank" rel="external">Implementing a Neural Network from Scratch in Python – An Introduction</a></p></li><li><p><a href="http://ufldl.stanford.edu/wiki/index.php/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C" target="_blank" rel="external">神经网络</a></p></li><li><p>backpropagation</p><ul><li><p><a href="http://galaxy.agh.edu.pl/~vlsi/AI/backp_t_en/backprop.html" target="_blank" rel="external">Principles of training multi-layer neural network using backpropagation</a></p></li><li><p><a href="http://ufldl.stanford.edu/wiki/index.php/%E5%8F%8D%E5%90%91%E4%BC%A0%E5%AF%BC%E7%AE%97%E6%B3%95" target="_blank" rel="external">反向传导算法</a></p></li></ul></li></ul><h4 id="Useful-Python-Library"><a href="#Useful-Python-Library" class="headerlink" title="Useful Python Library"></a>Useful Python Library</h4><ul><li><p><a href="http://deeplearning.net/software/theano/" target="_blank" rel="external">theano</a></p></li><li><p><a href="http://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_moons.html" target="_blank" rel="external">A simple toy dataset to visualize clustering and classification algorithms</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Neural-Network&quot;&gt;&lt;a href=&quot;#Neural-Network&quot; class=&quot;headerlink&quot; title=&quot;Neural Network&quot;&gt;&lt;/a&gt;Neural Network&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http
      
    
    </summary>
    
    
    
      <category term="深度学习 机器学习 神经网络 backpropagation" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-backpropagation/"/>
    
  </entry>
  
</feed>
